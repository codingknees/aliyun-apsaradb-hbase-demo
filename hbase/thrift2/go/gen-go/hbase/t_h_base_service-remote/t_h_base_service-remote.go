// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"hbase"
)

var _ = hbase.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   existsAll(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   getMultiple(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  void put(string table, TPut tput)")
  fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput)")
  fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  tputs)")
  fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  tdeletes)")
  fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement tincrement)")
  fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend tappend)")
  fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan tscan)")
  fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
  fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations trowMutations)")
  fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan tscan, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  THRegionLocation getRegionLocation(string table, string row, bool reload)")
  fmt.Fprintln(os.Stderr, "   getAllRegionLocations(string table)")
  fmt.Fprintln(os.Stderr, "  bool checkAndMutate(string table, string row, string family, string qualifier, TCompareOp compareOp, string value, TRowMutations rowMutations)")
  fmt.Fprintln(os.Stderr, "  TTableDescriptor getTableDescriptor(TTableName table)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptors( tables)")
  fmt.Fprintln(os.Stderr, "  bool tableExists(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  void createTable(TTableDescriptor desc,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void deleteTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void truncateTable(TTableName tableName, bool preserveSplits)")
  fmt.Fprintln(os.Stderr, "  void enableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void disableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableEnabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableDisabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailableWithSplit(TTableName tableName,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void addColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void deleteColumnFamily(TTableName tableName, string column)")
  fmt.Fprintln(os.Stderr, "  void modifyColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void modifyTable(TTableDescriptor desc)")
  fmt.Fprintln(os.Stderr, "  void createNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void modifyNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void deleteNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  TNamespaceDescriptor getNamespaceDescriptor(string name)")
  fmt.Fprintln(os.Stderr, "   listNamespaceDescriptors()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hbase.NewTHBaseServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "exists":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Exists requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg216 := flag.Arg(2)
    mbTrans217 := thrift.NewTMemoryBufferLen(len(arg216))
    defer mbTrans217.Close()
    _, err218 := mbTrans217.WriteString(arg216)
    if err218 != nil {
      Usage()
      return
    }
    factory219 := thrift.NewTJSONProtocolFactory()
    jsProt220 := factory219.GetProtocol(mbTrans217)
    argvalue1 := hbase.NewTGet()
    err221 := argvalue1.Read(context.Background(), jsProt220)
    if err221 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Exists(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "existsAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExistsAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg223 := flag.Arg(2)
    mbTrans224 := thrift.NewTMemoryBufferLen(len(arg223))
    defer mbTrans224.Close()
    _, err225 := mbTrans224.WriteString(arg223)
    if err225 != nil { 
      Usage()
      return
    }
    factory226 := thrift.NewTJSONProtocolFactory()
    jsProt227 := factory226.GetProtocol(mbTrans224)
    containerStruct1 := hbase.NewTHBaseServiceExistsAllArgs()
    err228 := containerStruct1.ReadField2(context.Background(), jsProt227)
    if err228 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.ExistsAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Get requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg230 := flag.Arg(2)
    mbTrans231 := thrift.NewTMemoryBufferLen(len(arg230))
    defer mbTrans231.Close()
    _, err232 := mbTrans231.WriteString(arg230)
    if err232 != nil {
      Usage()
      return
    }
    factory233 := thrift.NewTJSONProtocolFactory()
    jsProt234 := factory233.GetProtocol(mbTrans231)
    argvalue1 := hbase.NewTGet()
    err235 := argvalue1.Read(context.Background(), jsProt234)
    if err235 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Get(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg237 := flag.Arg(2)
    mbTrans238 := thrift.NewTMemoryBufferLen(len(arg237))
    defer mbTrans238.Close()
    _, err239 := mbTrans238.WriteString(arg237)
    if err239 != nil { 
      Usage()
      return
    }
    factory240 := thrift.NewTJSONProtocolFactory()
    jsProt241 := factory240.GetProtocol(mbTrans238)
    containerStruct1 := hbase.NewTHBaseServiceGetMultipleArgs()
    err242 := containerStruct1.ReadField2(context.Background(), jsProt241)
    if err242 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.GetMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Put requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg244 := flag.Arg(2)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue1 := hbase.NewTPut()
    err249 := argvalue1.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Put(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndPut":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg255 := flag.Arg(6)
    mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
    defer mbTrans256.Close()
    _, err257 := mbTrans256.WriteString(arg255)
    if err257 != nil {
      Usage()
      return
    }
    factory258 := thrift.NewTJSONProtocolFactory()
    jsProt259 := factory258.GetProtocol(mbTrans256)
    argvalue5 := hbase.NewTPut()
    err260 := argvalue5.Read(context.Background(), jsProt259)
    if err260 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "putMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg262 := flag.Arg(2)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil { 
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    containerStruct1 := hbase.NewTHBaseServicePutMultipleArgs()
    err267 := containerStruct1.ReadField2(context.Background(), jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tputs
    value1 := argvalue1
    fmt.Print(client.PutMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSingle":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg269 := flag.Arg(2)
    mbTrans270 := thrift.NewTMemoryBufferLen(len(arg269))
    defer mbTrans270.Close()
    _, err271 := mbTrans270.WriteString(arg269)
    if err271 != nil {
      Usage()
      return
    }
    factory272 := thrift.NewTJSONProtocolFactory()
    jsProt273 := factory272.GetProtocol(mbTrans270)
    argvalue1 := hbase.NewTDelete()
    err274 := argvalue1.Read(context.Background(), jsProt273)
    if err274 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DeleteSingle(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg276 := flag.Arg(2)
    mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
    defer mbTrans277.Close()
    _, err278 := mbTrans277.WriteString(arg276)
    if err278 != nil { 
      Usage()
      return
    }
    factory279 := thrift.NewTJSONProtocolFactory()
    jsProt280 := factory279.GetProtocol(mbTrans277)
    containerStruct1 := hbase.NewTHBaseServiceDeleteMultipleArgs()
    err281 := containerStruct1.ReadField2(context.Background(), jsProt280)
    if err281 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tdeletes
    value1 := argvalue1
    fmt.Print(client.DeleteMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndDelete":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg287 := flag.Arg(6)
    mbTrans288 := thrift.NewTMemoryBufferLen(len(arg287))
    defer mbTrans288.Close()
    _, err289 := mbTrans288.WriteString(arg287)
    if err289 != nil {
      Usage()
      return
    }
    factory290 := thrift.NewTJSONProtocolFactory()
    jsProt291 := factory290.GetProtocol(mbTrans288)
    argvalue5 := hbase.NewTDelete()
    err292 := argvalue5.Read(context.Background(), jsProt291)
    if err292 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndDelete(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "increment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Increment requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg294 := flag.Arg(2)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue1 := hbase.NewTIncrement()
    err299 := argvalue1.Read(context.Background(), jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Increment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "append":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Append requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg301 := flag.Arg(2)
    mbTrans302 := thrift.NewTMemoryBufferLen(len(arg301))
    defer mbTrans302.Close()
    _, err303 := mbTrans302.WriteString(arg301)
    if err303 != nil {
      Usage()
      return
    }
    factory304 := thrift.NewTJSONProtocolFactory()
    jsProt305 := factory304.GetProtocol(mbTrans302)
    argvalue1 := hbase.NewTAppend()
    err306 := argvalue1.Read(context.Background(), jsProt305)
    if err306 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Append(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openScanner":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg308 := flag.Arg(2)
    mbTrans309 := thrift.NewTMemoryBufferLen(len(arg308))
    defer mbTrans309.Close()
    _, err310 := mbTrans309.WriteString(arg308)
    if err310 != nil {
      Usage()
      return
    }
    factory311 := thrift.NewTJSONProtocolFactory()
    jsProt312 := factory311.GetProtocol(mbTrans309)
    argvalue1 := hbase.NewTScan()
    err313 := argvalue1.Read(context.Background(), jsProt312)
    if err313 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.OpenScanner(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerRows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
      flag.Usage()
    }
    tmp0, err314 := (strconv.Atoi(flag.Arg(1)))
    if err314 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err315 := (strconv.Atoi(flag.Arg(2)))
    if err315 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetScannerRows(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeScanner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
      flag.Usage()
    }
    tmp0, err316 := (strconv.Atoi(flag.Arg(1)))
    if err316 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CloseScanner(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mutateRow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg318 := flag.Arg(2)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue1 := hbase.NewTRowMutations()
    err323 := argvalue1.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MutateRow(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerResults":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg325 := flag.Arg(2)
    mbTrans326 := thrift.NewTMemoryBufferLen(len(arg325))
    defer mbTrans326.Close()
    _, err327 := mbTrans326.WriteString(arg325)
    if err327 != nil {
      Usage()
      return
    }
    factory328 := thrift.NewTJSONProtocolFactory()
    jsProt329 := factory328.GetProtocol(mbTrans326)
    argvalue1 := hbase.NewTScan()
    err330 := argvalue1.Read(context.Background(), jsProt329)
    if err330 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err331 := (strconv.Atoi(flag.Arg(3)))
    if err331 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetScannerResults(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRegionLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRegionLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.GetRegionLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllRegionLocations":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllRegionLocations requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.GetAllRegionLocations(context.Background(), value0))
    fmt.Print("\n")
    break
  case "checkAndMutate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CheckAndMutate requires 7 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hbase.TCompareOp(tmp4)
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    arg341 := flag.Arg(7)
    mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
    defer mbTrans342.Close()
    _, err343 := mbTrans342.WriteString(arg341)
    if err343 != nil {
      Usage()
      return
    }
    factory344 := thrift.NewTJSONProtocolFactory()
    jsProt345 := factory344.GetProtocol(mbTrans342)
    argvalue6 := hbase.NewTRowMutations()
    err346 := argvalue6.Read(context.Background(), jsProt345)
    if err346 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    fmt.Print(client.CheckAndMutate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getTableDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptor requires 1 args")
      flag.Usage()
    }
    arg347 := flag.Arg(1)
    mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewTJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue0 := hbase.NewTTableName()
    err352 := argvalue0.Read(context.Background(), jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptors":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptors requires 1 args")
      flag.Usage()
    }
    arg353 := flag.Arg(1)
    mbTrans354 := thrift.NewTMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil { 
      Usage()
      return
    }
    factory356 := thrift.NewTJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    containerStruct0 := hbase.NewTHBaseServiceGetTableDescriptorsArgs()
    err358 := containerStruct0.ReadField1(context.Background(), jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Tables
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptors(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tableExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TableExists requires 1 args")
      flag.Usage()
    }
    arg359 := flag.Arg(1)
    mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
    defer mbTrans360.Close()
    _, err361 := mbTrans360.WriteString(arg359)
    if err361 != nil {
      Usage()
      return
    }
    factory362 := thrift.NewTJSONProtocolFactory()
    jsProt363 := factory362.GetProtocol(mbTrans360)
    argvalue0 := hbase.NewTTableName()
    err364 := argvalue0.Read(context.Background(), jsProt363)
    if err364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TableExists(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableDescriptorsByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptorsByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableNamesByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableNamesByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableNamesByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableNamesByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
      flag.Usage()
    }
    arg371 := flag.Arg(1)
    mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
    defer mbTrans372.Close()
    _, err373 := mbTrans372.WriteString(arg371)
    if err373 != nil {
      Usage()
      return
    }
    factory374 := thrift.NewTJSONProtocolFactory()
    jsProt375 := factory374.GetProtocol(mbTrans372)
    argvalue0 := hbase.NewTTableDescriptor()
    err376 := argvalue0.Read(context.Background(), jsProt375)
    if err376 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg377 := flag.Arg(2)
    mbTrans378 := thrift.NewTMemoryBufferLen(len(arg377))
    defer mbTrans378.Close()
    _, err379 := mbTrans378.WriteString(arg377)
    if err379 != nil { 
      Usage()
      return
    }
    factory380 := thrift.NewTJSONProtocolFactory()
    jsProt381 := factory380.GetProtocol(mbTrans378)
    containerStruct1 := hbase.NewTHBaseServiceCreateTableArgs()
    err382 := containerStruct1.ReadField2(context.Background(), jsProt381)
    if err382 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.CreateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
      flag.Usage()
    }
    arg383 := flag.Arg(1)
    mbTrans384 := thrift.NewTMemoryBufferLen(len(arg383))
    defer mbTrans384.Close()
    _, err385 := mbTrans384.WriteString(arg383)
    if err385 != nil {
      Usage()
      return
    }
    factory386 := thrift.NewTJSONProtocolFactory()
    jsProt387 := factory386.GetProtocol(mbTrans384)
    argvalue0 := hbase.NewTTableName()
    err388 := argvalue0.Read(context.Background(), jsProt387)
    if err388 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "truncateTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 2 args")
      flag.Usage()
    }
    arg389 := flag.Arg(1)
    mbTrans390 := thrift.NewTMemoryBufferLen(len(arg389))
    defer mbTrans390.Close()
    _, err391 := mbTrans390.WriteString(arg389)
    if err391 != nil {
      Usage()
      return
    }
    factory392 := thrift.NewTJSONProtocolFactory()
    jsProt393 := factory392.GetProtocol(mbTrans390)
    argvalue0 := hbase.NewTTableName()
    err394 := argvalue0.Read(context.Background(), jsProt393)
    if err394 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.TruncateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "enableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
      flag.Usage()
    }
    arg396 := flag.Arg(1)
    mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
    defer mbTrans397.Close()
    _, err398 := mbTrans397.WriteString(arg396)
    if err398 != nil {
      Usage()
      return
    }
    factory399 := thrift.NewTJSONProtocolFactory()
    jsProt400 := factory399.GetProtocol(mbTrans397)
    argvalue0 := hbase.NewTTableName()
    err401 := argvalue0.Read(context.Background(), jsProt400)
    if err401 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "disableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
      flag.Usage()
    }
    arg402 := flag.Arg(1)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil {
      Usage()
      return
    }
    factory405 := thrift.NewTJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    argvalue0 := hbase.NewTTableName()
    err407 := argvalue0.Read(context.Background(), jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableEnabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
      flag.Usage()
    }
    arg408 := flag.Arg(1)
    mbTrans409 := thrift.NewTMemoryBufferLen(len(arg408))
    defer mbTrans409.Close()
    _, err410 := mbTrans409.WriteString(arg408)
    if err410 != nil {
      Usage()
      return
    }
    factory411 := thrift.NewTJSONProtocolFactory()
    jsProt412 := factory411.GetProtocol(mbTrans409)
    argvalue0 := hbase.NewTTableName()
    err413 := argvalue0.Read(context.Background(), jsProt412)
    if err413 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableEnabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableDisabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableDisabled requires 1 args")
      flag.Usage()
    }
    arg414 := flag.Arg(1)
    mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
    defer mbTrans415.Close()
    _, err416 := mbTrans415.WriteString(arg414)
    if err416 != nil {
      Usage()
      return
    }
    factory417 := thrift.NewTJSONProtocolFactory()
    jsProt418 := factory417.GetProtocol(mbTrans415)
    argvalue0 := hbase.NewTTableName()
    err419 := argvalue0.Read(context.Background(), jsProt418)
    if err419 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableDisabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableAvailable requires 1 args")
      flag.Usage()
    }
    arg420 := flag.Arg(1)
    mbTrans421 := thrift.NewTMemoryBufferLen(len(arg420))
    defer mbTrans421.Close()
    _, err422 := mbTrans421.WriteString(arg420)
    if err422 != nil {
      Usage()
      return
    }
    factory423 := thrift.NewTJSONProtocolFactory()
    jsProt424 := factory423.GetProtocol(mbTrans421)
    argvalue0 := hbase.NewTTableName()
    err425 := argvalue0.Read(context.Background(), jsProt424)
    if err425 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailableWithSplit":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsTableAvailableWithSplit requires 2 args")
      flag.Usage()
    }
    arg426 := flag.Arg(1)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil {
      Usage()
      return
    }
    factory429 := thrift.NewTJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    argvalue0 := hbase.NewTTableName()
    err431 := argvalue0.Read(context.Background(), jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg432 := flag.Arg(2)
    mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
    defer mbTrans433.Close()
    _, err434 := mbTrans433.WriteString(arg432)
    if err434 != nil { 
      Usage()
      return
    }
    factory435 := thrift.NewTJSONProtocolFactory()
    jsProt436 := factory435.GetProtocol(mbTrans433)
    containerStruct1 := hbase.NewTHBaseServiceIsTableAvailableWithSplitArgs()
    err437 := containerStruct1.ReadField2(context.Background(), jsProt436)
    if err437 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.IsTableAvailableWithSplit(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddColumnFamily requires 2 args")
      flag.Usage()
    }
    arg438 := flag.Arg(1)
    mbTrans439 := thrift.NewTMemoryBufferLen(len(arg438))
    defer mbTrans439.Close()
    _, err440 := mbTrans439.WriteString(arg438)
    if err440 != nil {
      Usage()
      return
    }
    factory441 := thrift.NewTJSONProtocolFactory()
    jsProt442 := factory441.GetProtocol(mbTrans439)
    argvalue0 := hbase.NewTTableName()
    err443 := argvalue0.Read(context.Background(), jsProt442)
    if err443 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg444 := flag.Arg(2)
    mbTrans445 := thrift.NewTMemoryBufferLen(len(arg444))
    defer mbTrans445.Close()
    _, err446 := mbTrans445.WriteString(arg444)
    if err446 != nil {
      Usage()
      return
    }
    factory447 := thrift.NewTJSONProtocolFactory()
    jsProt448 := factory447.GetProtocol(mbTrans445)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err449 := argvalue1.Read(context.Background(), jsProt448)
    if err449 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteColumnFamily requires 2 args")
      flag.Usage()
    }
    arg450 := flag.Arg(1)
    mbTrans451 := thrift.NewTMemoryBufferLen(len(arg450))
    defer mbTrans451.Close()
    _, err452 := mbTrans451.WriteString(arg450)
    if err452 != nil {
      Usage()
      return
    }
    factory453 := thrift.NewTJSONProtocolFactory()
    jsProt454 := factory453.GetProtocol(mbTrans451)
    argvalue0 := hbase.NewTTableName()
    err455 := argvalue0.Read(context.Background(), jsProt454)
    if err455 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.DeleteColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ModifyColumnFamily requires 2 args")
      flag.Usage()
    }
    arg457 := flag.Arg(1)
    mbTrans458 := thrift.NewTMemoryBufferLen(len(arg457))
    defer mbTrans458.Close()
    _, err459 := mbTrans458.WriteString(arg457)
    if err459 != nil {
      Usage()
      return
    }
    factory460 := thrift.NewTJSONProtocolFactory()
    jsProt461 := factory460.GetProtocol(mbTrans458)
    argvalue0 := hbase.NewTTableName()
    err462 := argvalue0.Read(context.Background(), jsProt461)
    if err462 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg463 := flag.Arg(2)
    mbTrans464 := thrift.NewTMemoryBufferLen(len(arg463))
    defer mbTrans464.Close()
    _, err465 := mbTrans464.WriteString(arg463)
    if err465 != nil {
      Usage()
      return
    }
    factory466 := thrift.NewTJSONProtocolFactory()
    jsProt467 := factory466.GetProtocol(mbTrans464)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err468 := argvalue1.Read(context.Background(), jsProt467)
    if err468 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ModifyColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyTable requires 1 args")
      flag.Usage()
    }
    arg469 := flag.Arg(1)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil {
      Usage()
      return
    }
    factory472 := thrift.NewTJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    argvalue0 := hbase.NewTTableDescriptor()
    err474 := argvalue0.Read(context.Background(), jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
      flag.Usage()
    }
    arg475 := flag.Arg(1)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil {
      Usage()
      return
    }
    factory478 := thrift.NewTJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err480 := argvalue0.Read(context.Background(), jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "modifyNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyNamespace requires 1 args")
      flag.Usage()
    }
    arg481 := flag.Arg(1)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err486 := argvalue0.Read(context.Background(), jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DeleteNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNamespaceDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNamespaceDescriptor requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetNamespaceDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listNamespaceDescriptors":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListNamespaceDescriptors requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListNamespaceDescriptors(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
